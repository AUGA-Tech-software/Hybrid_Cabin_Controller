/*
** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : HCS12_OS_BIOS_Integration_stripped.PRM
**     Project   : HCS12_OS_BIOS_Integration_stripped
**     Processor : MC9S12XEQ512MAG
**     Compiler  : CodeWarrior HCS12X C Compiler
**     Date/Time : 14.07.2009, 15:20
**     Abstract  :
**        This file is used by the linker. It describes files to be linked,
**        memory ranges, stack size, etc. For detailed description of the PRM file
**        see CodeWarrior documentation. This file is generated by default.
**        You can switch off generation by setting the property
**        "Generate PRM file = no" on the "Build options" tab in CPU bean and then modify
**        this file if needed.
**
**     (c) Copyright UNIS, a.s. 1997-2008
**     UNIS, a.s.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################
*/

NAMES

END



SEGMENTS  /* Here all RAM/ROM areas of the device are listed. Used in PLACEMENT below. */


      RAM_TEST_RESULT_DEF   = READ_WRITE  0x2000 TO 0x2001;  //1b JHT20150112: Ergebnis für RAM Test
      RAM                   = READ_WRITE  0x2002 TO 0x3DFF;  //7678b RAM
      RAM_STACK             = NO_INIT     0x3E00 TO 0x3FFF;  //200b Stack
      ROM_4000	            = READ_ONLY	  0x4020 TO 0x7EFB;  //16092b ROM 4000
      ROM_TEST_CRC_DEF      = READ_ONLY   0x7EFC TO 0x7EFF;  //4b JHT20150112: CRC Wert für ROM Test  
      //ROM_C000            = READ_ONLY   0xC000 TO 0xFEFF;

      // Der paged RAM liegt in C auf den Adressbereichen, die durch weglassen der Ziffer "1" in den
      // Adressen des Linker *.prm Files angegeben werden.
      // Beispiel:
      // im PRM-File   0xFA1000 TO 0xFA1FFF aber im C-Programm  0xFA000 TO 0xFAFFF
      RAM_FA                = READ_WRITE  0xFA1000 TO 0xFA1FFF;
      RAM_FB                = READ_WRITE  0xFB1000 TO 0xFB1FFF;
      RAM_FC                = READ_WRITE  0xFC1000 TO 0xFC1FFF;
      RAM_FD                = READ_WRITE  0xFD1000 TO 0xFD1FFF;      
      
      EBI_PATTERN_DEF       = READ_ONLY   0xE08000 TO 0xE08001;
      PAGE_E0               = READ_ONLY   0xE08002 TO 0xE0BFFF;
      PAGE_E1               = READ_ONLY   0xE18000 TO 0xE1BFFF;
      PAGE_E2               = READ_ONLY   0xE28000 TO 0xE2BFFF;
      PAGE_E3               = READ_ONLY   0xE38000 TO 0xE3BFFF;
      PAGE_E4               = READ_ONLY   0xE48000 TO 0xE4BFFF;
      PAGE_E5               = READ_ONLY   0xE58000 TO 0xE5BFFF;
      PAGE_E6               = READ_ONLY   0xE68000 TO 0xE6BFFF;
      PAGE_E7               = READ_ONLY   0xE78000 TO 0xE7BFFF;
      /*
      PAGE_E8               = READ_ONLY   0xE88000 TO 0xE8BFFF; // MC9S12XDT512BCFV
      PAGE_E9               = READ_ONLY   0xE98000 TO 0xE9BFFF; // MC9S12XDT512BCFV
      PAGE_EA               = READ_ONLY   0xEA8000 TO 0xEABFFF; // MC9S12XDT512BCFV
      PAGE_EB               = READ_ONLY   0xEB8000 TO 0xEBBFFF; // MC9S12XDT512BCFV
      PAGE_EC               = READ_ONLY   0xEC8000 TO 0xECBFFF; // MC9S12XDT512BCFV
      PAGE_ED               = READ_ONLY   0xED8000 TO 0xEDBFFF; // MC9S12XDT512BCFV
      PAGE_EE               = READ_ONLY   0xEE8000 TO 0xEEBFFF; // MC9S12XDT512BCFV
      PAGE_EF               = READ_ONLY   0xEF8000 TO 0xEFBFFF; // MC9S12XDT512BCFV
      */
      PAGE_F0               = READ_ONLY   0xF08000 TO 0xF0BFFF;
      PAGE_F1               = READ_ONLY   0xF18000 TO 0xF1BFFF;
      PAGE_F2               = READ_ONLY   0xF28000 TO 0xF2BFFF;
      PAGE_F3               = READ_ONLY   0xF38000 TO 0xF3BFFF;
      PAGE_F4               = READ_ONLY   0xF48000 TO 0xF4BFFF;
      PAGE_F5               = READ_ONLY   0xF58000 TO 0xF5BFFF;
      PAGE_F6               = READ_ONLY   0xF68000 TO 0xF6BFFF;
      PAGE_F7               = READ_ONLY   0xF78000 TO 0xF7BFFF;
      PAGE_F8               = READ_ONLY   0xF88000 TO 0xF8BFFF;
      PAGE_F9               = READ_ONLY   0xF98000 TO 0xF9BFFF;
      PAGE_FA               = READ_ONLY   0xFA8000 TO 0xFABFFF;
      PAGE_FB               = READ_ONLY   0xFB8000 TO 0xFBBFFF;
      PAGE_FC               = READ_ONLY   0xFC8000 TO 0xFCBFFF;
//    PAGE_FD               = READ_ONLY   0xFD8000 TO 0xFDBFFF;     // intentionally not defined: equivalent to ROM_4000 
// => PAGE_FE               = READ_ONLY   0xFE8000 TO 0xFEBFFF;     // Reserviert fuer BOOTLOADER-Erweiterung
//    PAGE_FF               = READ_ONLY   0xFF8000 TO 0xFFBFFF;     // intentionally not defined: equivalent to ROM_C000 

      EXT_RAM_NOT_INIT_DEF  = NO_INIT     0x200000'G TO 0x20003F'G; // external space used for uninitialized variables
      EXT_RAM_INIT_DEF      = READ_WRITE  0x200040'G TO 0x23FFFF'G; // external space used for initialized variables     
END

PLACEMENT /* here all predefined and user segments are placed into the SEGMENTS defined above. */
      _PRESTART,              /* Used in HIWARE format: jump to _Startup at the code start */
      STARTUP,                /* startup data structures */
      ROM_VAR,                /* constant variables */
      STRINGS,                /* string literals */
      NON_BANKED,             /* runtime routines which must not be banked */
      COPY                  INTO  ROM_4000;
//    COPY                  INTO  ROM_C000;

      DEFAULT_ROM           INTO  /*PAGE_FE, PAGE_FC, PAGE_FB, PAGE_FA, PAGE_F9, PAGE_F8, PAGE_F7, PAGE_F6, 
                                PAGE_F5, PAGE_F4, PAGE_F3, PAGE_F2, PAGE_F1, PAGE_F0, PAGE_EF, PAGE_EE, 
                                PAGE_ED, PAGE_EC, PAGE_EB, PAGE_EA, PAGE_E9, PAGE_E8, PAGE_E7, PAGE_E6, 
                                PAGE_E5, PAGE_E4, PAGE_E3, PAGE_E2, PAGE_E1, PAGE_E0;
                                */
                                PAGE_FC, PAGE_FB, PAGE_FA, PAGE_F9, PAGE_F8, PAGE_F7;                              

      //reserved for EBI pattern 0xA5A5
      EBI_PATTERN           INTO EBI_PATTERN_DEF;  
      
      
      DEFAULT_RAM           /* all variables, the default RAM location */
                            INTO  RAM;
      DEFAULT_RAM_EXT       INTO  /* when using banked addressing for variable data, make sure to specify
                                 the option -D__FAR_DATA on the compiler command line */
                              RAM_FD, RAM_FC, RAM_FB, RAM_FA;
      
      SSTACK                INTO  RAM_STACK;
                              
      EXT_RAM_NOT_INIT      INTO  EXT_RAM_NOT_INIT_DEF;  // external space used for uninitialized variables 
      EXT_RAM_INIT          INTO  EXT_RAM_INIT_DEF;  // external space used for initialized variables
      
      ROM_TEST_CRC          INTO  ROM_TEST_CRC_DEF;       //JHT20150112: CRC Wert für ROM Test 
      RAM_TEST_RESULT       INTO  RAM_TEST_RESULT_DEF;    //JHT20150112: Ergebnis für RAM Test 
                              
END

INIT _EntryPoint              /* The entry point of the application. This function is generated into the CPU module. */

STACKSIZE 0x0200              /* Size of the system stack. Value can be changed on the "Build options" tab */
